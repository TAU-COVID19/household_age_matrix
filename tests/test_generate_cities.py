from main import GROUP_COUNT, Plot3d,REPS_NUM, count,save,calc_avg,calc_sem
from math import isnan


def helper(res,expected):
    for i in range(GROUP_COUNT):
        for j in range(GROUP_COUNT):
            assert res[i][j]==expected[i][j],"({},{})".format(i,j)

def test_count1():
    expected = \
[[(2+2+2)/3, 0, 0, 0, 0, (2 + 2+2)/3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
 [(3+3)/2, 0, 0, 0, 0, (1+1)/2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,],
 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,]]

    city  = [[0,1,2,27,28]]
    res = count(city)
    helper(res = res,expected = expected)
    

def test_count2():
    expected = \
[[0,  0.5,0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
 [1,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
 [1,  0.5,0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0 ]]
    city = [[1,5,27,28],[1,27,28]]
    res = count(city)
    helper(res = res,expected = expected)

def test_count3():
    expected = \
[[0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, ],
 [0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0, ],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, ],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, ],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, ],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, ],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, ],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, ],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, ],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, ],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, ],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, ],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, ],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, ],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, ],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, ]]
    city = [[1],[75]]
    res = count(city)
    helper(res = res,expected = expected)

def test_count4():
    expected = \
[[2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, ],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, ],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, ],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, ],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, ],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, ],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, ],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, ],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, ],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, ],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, ],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, ],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, ],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, ],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, ],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4, ]]
    city = [[1,2,3],[75,75,75,75,75]]
    res = count(city)
    helper(res = res,expected = expected)

def test_count5():
    expected = \
[[0,  1/2,0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, ],
 [1,  0,  0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, ],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, ],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, ],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, ],
 [1,  2/4,0,  0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, ],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, ],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, ],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, ],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, ],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, ],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, ],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, ],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, ],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, ],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, ]]
    city = [[1,5,27,28],[1,27,28]]
    res = count(city)
    helper(res = res,expected = expected)

def test_count6():
    expected = \
[[0,  3,  2,        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
 [1,  2,  2,        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
 [1,  3,  (1+1)/2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
 [0,  0,  0,        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
 [0,  0,  0,        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
 [0,  0,  0,        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
 [0,  0,  0,        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
 [0,  0,  0,        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
 [0,  0,  0,        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
 [0,  0,  0,        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
 [0,  0,  0,        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
 [0,  0,  0,        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
 [0,  0,  0,        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
 [0,  0,  0,        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
 [0,  0,  0,        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
 [0,  0,  0,        0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0]]
    city_arrays = [[1, 10, 10, 9, 8, 9] for _ in range(REPS_NUM)]
    res = count(city_arrays)
    helper(res = res,expected = expected)

def test_count7():
    expected = \
[[(4+4+4+4+4)/6,  (5+5+5+5+5+2)/6,  (0+0+0+0+0+2)/6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
 [(5+5+5+5+5+1+1)/7,  (4+4+4+4+4+1+1)/7,  (0+0+0+0+0+2+2)/7,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
 [(1+1)/2,  (2+2)/2,  (1+1)/2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
 [0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0]]
    city_arrays = [[1,2,3,1, 9,8, 7, 3,6,6], [2,7,11,10,9]]
    res = count(city_arrays)
    helper(res = res,expected = expected)

def test_count8():
    expected = \
[[(0+1+1)/3, (0+0)/3, 1/3,      0/3,    (1+1+1)/3,  (1+1+1)/3,  0,0,0,0,0,0,0,0,0,0],
 [(0+0+0)/2, (1+1)/2, (1+1)/2,  (1+1)/2,0/2,        0/2,        0,0,0,0,0,0,0,0,0,0],
 [(1+0)/2,   (0+2)/2, (0+0)/2,  (0+1)/2,(1+0)/2,    (1+0)/2,    0,0,0,0,0,0,0,0,0,0],
 [0/1,       2/1,     1/1,       0/1   ,0/1,        0/1,        0,0,0,0,0,0,0,0,0,0],
 [(1+2)/2,   0/2,     1/2,      (0+0)/2,(0+0)/2,    (1+1)/2,    0,0,0,0,0,0,0,0,0,0],
 [(1+2)/2,   (0+0)/2, (1+0)/2,  (0+0)/2,(1+1)/2,    (0+0)/2,    0,0,0,0,0,0,0,0,0,0],
 [0,         0,       0,        0,      0,          0,          0,0,0,0,0,0,0,0,0,0],
 [0,         0,       0,        0,      0,          0,          0,0,0,0,0,0,0,0,0,0],
 [0,         0,       0,        0,      0,          0,          0,0,0,0,0,0,0,0,0,0],
 [0,         0,       0,        0,      0,          0,          0,0,0,0,0,0,0,0,0,0],
 [0,         0,       0,        0,      0,          0,          0,0,0,0,0,0,0,0,0,0],
 [0,         0,       0,        0,      0,          0,          0,0,0,0,0,0,0,0,0,0],
 [0,         0,       0,        0,      0,          0,          0,0,0,0,0,0,0,0,0,0],
 [0,         0,       0,        0,      0,          0,          0,0,0,0,0,0,0,0,0,0],
 [0,         0,       0,        0,      0,          0,          0,0,0,0,0,0,0,0,0,0],
 [0,         0,       0,        0,      0,          0,          0,0,0,0,0,0,0,0,0,0]]
    city_arrays = [[26, 14,  3, 23],[23, 29,  3,  4],[ 9,  9, 17, 13]]
    res = count(city_arrays)
    helper(res = res,expected = expected)

def test_count9():
    expected = \
[[0,    0,          0,          0,          0,          0,          0,0,0,0,0,0,0,0,0,0],
 [0/1,  0/1,        0/1,        2/1,        1/1,        0/1,        0,0,0,0,0,0,0,0,0,0],
 [0/1,  0/1,        0/1,        (1+1+1)/2,  1/2,        (2+0)/2,    0,0,0,0,0,0,0,0,0,0],
 [0/6,  (2+0+0+0)/6,(0+1+2+0)/6,(2+0+2+0)/6,(2+0+2+3)/6,(0+2+0+0)/6,0,0,0,0,0,0,0,0,0,0],
 [0/5,  (1+0+0+0)/5,(0+1+0+0)/5,(2+0+2+3)/5,(0+0+6)/5,  (0+0+0)/5,  0,0,0,0,0,0,0,0,0,0],
 [0/3,  0/3,        (0+2+0+0)/2,(0+2+0+0)/2,0/2,        2/2,        0,0,0,0,0,0,0,0,0,0],
 [0,    0,          0,          0,          0,          0,          0,0,0,0,0,0,0,0,0,0],
 [0,    0,          0,          0,          0,          0,          0,0,0,0,0,0,0,0,0,0],
 [0,    0,          0,          0,          0,          0,          0,0,0,0,0,0,0,0,0,0],
 [0,    0,          0,          0,          0,          0,          0,0,0,0,0,0,0,0,0,0],
 [0,    0,          0,          0,          0,          0,          0,0,0,0,0,0,0,0,0,0],
 [0,    0,          0,          0,          0,          0,          0,0,0,0,0,0,0,0,0,0],
 [0,    0,          0,          0,          0,          0,          0,0,0,0,0,0,0,0,0,0],
 [0,    0,          0,          0,          0,          0,          0,0,0,0,0,0,0,0,0,0],
 [0,    0,          0,          0,          0,          0,          0,0,0,0,0,0,0,0,0,0],
 [0,    0,          0,          0,          0,          0,          0,0,0,0,0,0,0,0,0,0]]

    city_arrays = [[15,  5, 20, 16],[26, 12, 15, 27],[19, 11, 24, 19],[23, 21, 16, 21]]
    res = count(city_arrays)
    helper(res = res,expected = expected)

def test_count10():
    expected = \
[[(0+12)/4, (0+12)/4,   0,0,0,0,0,0,0,0,    0/4,        0/4,        0,0,0,0],
 [(0+12)/5, (2+6)/5,    0,0,0,0,0,0,0,0,    0/5,        0/5,        0,0,0,0],
 [0,        0,          0,0,0,0,0,0,0,0,    0,          0,          0,0,0,0],
 [0,        0,          0,0,0,0,0,0,0,0,    0,          0,          0,0,0,0],
 [0,        0,          0,0,0,0,0,0,0,0,    0,          0,          0,0,0,0],
 [0,        0,          0,0,0,0,0,0,0,0,    0,          0,          0,0,0,0],
 [0,        0,          0,0,0,0,0,0,0,0,    0,          0,          0,0,0,0],
 [0,        0,          0,0,0,0,0,0,0,0,    0,          0,          0,0,0,0],
 [0,        0,          0,0,0,0,0,0,0,0,    0,          0,          0,0,0,0],
 [0,        0,          0,0,0,0,0,0,0,0,    0,          0,          0,0,0,0],
 [0/7,      0/7,        0,0,0,0,0,0,0,0,    (2+20)/7,   (12+10)/7,  0,0,0,0],
 [0/8,      0/8,        0,0,0,0,0,0,0,0,    (12+10)/8,  (30+2)/8,   0,0,0,0],
 [0,        0,          0,0,0,0,0,0,0,0,    0,          0,          0,0,0,0],
 [0,        0,          0,0,0,0,0,0,0,0,    0,          0,          0,0,0,0],
 [0,        0,          0,0,0,0,0,0,0,0,    0,          0,          0,0,0,0],
 [0,        0,          0,0,0,0,0,0,0,0,    0,          0,          0,0,0,0]]
    city_arrays = [[57, 53, 58, 56, 58, 57, 57, 53], [54, 56, 57, 52, 51, 52, 51],[7, 8], [6, 2, 0, 4, 4, 8, 9]]
    res = count(city_arrays)
    avg_mat = calc_avg([res])
    Plot3d(expected = res,city_name="res.png")
    Plot3d(expected = avg_mat,city_name="avg.png")
    helper(res = res,expected = expected)
    